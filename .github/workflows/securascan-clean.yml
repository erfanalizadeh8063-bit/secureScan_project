name: SecuraScan CI (clean)

on:
  push:
    branches: [ main, 'feature/**', 'ci/**' ]
  pull_request:
    branches: [ main ]

jobs:
  security:
    name: SecuraScan CI / security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            secureScan_Back/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run gitleaks (secret scan)
        uses: gitleaks/gitleaks-action@v2
        with:
          args: '--verbose'

      - name: Install cargo-audit
        run: cargo install cargo-audit || true

      - name: Run cargo-audit
        run: |
          cd secureScan_Back
          cargo audit || true

  build-and-scan:
    name: build-and-scan
    runs-on: ubuntu-latest
    needs: security
    env:
      RENDER_BACKEND_DEPLOY_HOOK: ${{ secrets.RENDER_BACKEND_DEPLOY_HOOK }}
      RENDER_FRONTEND_DEPLOY_HOOK: ${{ secrets.RENDER_FRONTEND_DEPLOY_HOOK }}
      RENDER_BACKEND_URL: ${{ secrets.RENDER_BACKEND_URL }}
      RENDER_FRONTEND_URL: ${{ secrets.RENDER_FRONTEND_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            secureScan_Back/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Set up Rust
        uses: actions/setup-rust@v1

      - name: Build backend
        run: |
          cd secureScan_Back
          cargo build --release

      - name: Run backend tests
        run: |
          cd secureScan_Back
          cargo test --release

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            secureScan_Front/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/secureScan_Front/package-lock.json') }}

      - name: Build frontend
        run: |
          cd secureScan_Front
          npm ci
          npm run build

      - name: Start backend (background)
        run: |
          cd secureScan_Back
          nohup cargo run --release &

      - name: Wait for backend
        run: |
          for i in {1..15}; do
            if curl -sSf http://127.0.0.1:8080/healthz; then
              exit 0
            fi
            sleep 1
          done
          exit 1

      - name: Call CI webhook and evaluate risk_score
        id: webhook
        run: |
          set -e
          RESP=$(curl -sS -X POST http://127.0.0.1:8080/api/ci/webhook/github -d '{}' || echo '')
          echo "response=$RESP" >> $GITHUB_OUTPUT
          if [ -z "$RESP" ]; then
            echo "risk=0" >> $GITHUB_OUTPUT
          else
            RISK=$(echo "$RESP" | jq -r '.risk_score // 0')
            echo "risk=$RISK" >> $GITHUB_OUTPUT
            if [ "$RISK" -ge 80 ]; then
              echo "High risk ($RISK) detected"; exit 1
            fi
          fi

      - name: Trigger optional Render deploy hooks
        run: |
          set -e
          # Trigger deploy hooks if provided (no-op if not set)
          if [ -n "${RENDER_FRONTEND_DEPLOY_HOOK}" ]; then
            echo "Triggering frontend deploy hook..."
            curl -fsS -X POST "${RENDER_FRONTEND_DEPLOY_HOOK}" || echo "frontend hook failed"
          else
            echo "No frontend deploy hook provided; skipping"
          fi

          if [ -n "${RENDER_BACKEND_DEPLOY_HOOK}" ]; then
            echo "Triggering backend deploy hook..."
            curl -fsS -X POST "${RENDER_BACKEND_DEPLOY_HOOK}" || echo "backend hook failed"
          else
            echo "No backend deploy hook provided; skipping"
          fi

      - name: Optional Render health checks
        run: |
          set -e
          # Poll backend health if RENDER_BACKEND_URL provided
          if [ -n "${RENDER_BACKEND_URL}" ]; then
            echo "Polling backend at ${RENDER_BACKEND_URL}/healthz"
            for i in $(seq 1 20); do
              CODE=$(curl -s -o /dev/null -w "%{http_code}" "${RENDER_BACKEND_URL}/healthz" || echo 000)
              echo " attempt $i → $CODE"
              [ "$CODE" = "200" ] && { echo "✅ Backend healthy"; break; }
              sleep 6
            done
          else
            echo "No RENDER_BACKEND_URL provided; skipping backend health check"
          fi

          # Poll frontend root if RENDER_FRONTEND_URL provided
          if [ -n "${RENDER_FRONTEND_URL}" ]; then
            echo "Polling frontend at ${RENDER_FRONTEND_URL}"
            for i in $(seq 1 20); do
              CODE=$(curl -s -o /dev/null -w "%{http_code}" "${RENDER_FRONTEND_URL}" || echo 000)
              echo " attempt $i → $CODE"
              if [ "$CODE" = "200" ] || [ "$CODE" = "304" ]; then
                echo "✅ Frontend serving"; break
              fi
              sleep 6
            done
          else
            echo "No RENDER_FRONTEND_URL provided; skipping frontend health check"
          fi

      - name: Comment on PR (if low risk)
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const risk = parseInt(process.env.RISK || '0');
            if (context.issue && context.issue.number) {
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `SecuraScan CI completed. risk_score=${risk}`
              })
            }
        env:
          RISK: ${{ steps.webhook.outputs.risk }}

      - name: Docker prune (cleanup)
        if: ${{ success() }}
        run: |
          docker builder prune -af || true
          docker system prune -af || true
