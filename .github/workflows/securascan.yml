name: SecuraScan CI

on:
  push:
    branches: [ main, 'feature/**', 'ci/**' ]
  pull_request:
    branches: [ main ]

jobs:
  security:
    name: SecuraScan CI / security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run gitleaks (secret scan)
        uses: gitleaks/gitleaks-action@v2
        with:
          args: '--verbose'

      - name: Install cargo-audit
        run: cargo install cargo-audit || true

      - name: Run cargo-audit
        run: |
          cd secureScan_Back
          cargo audit || true

  build-and-scan:
    name: build-and-scan
    runs-on: ubuntu-latest
    needs: security
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions/setup-rust@v1

      - name: Build backend
        run: |
          cd secureScan_Back
          cargo build --release

      - name: Run backend tests
        run: |
          cd secureScan_Back
          cargo test --release

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Build frontend
        run: |
          cd secureScan_Front
          npm ci
          npm run build

      - name: Start backend (background)
        run: |
          cd secureScan_Back
          nohup cargo run --release &

      - name: Wait for backend
        run: |
          for i in {1..15}; do
            if curl -sSf http://127.0.0.1:8080/healthz; then
              exit 0
            fi
            sleep 1
          done
          exit 1

      - name: Call CI webhook and evaluate risk_score
        id: webhook
        run: |
          set -e
          RESP=$(curl -sS -X POST http://127.0.0.1:8080/api/ci/webhook/github -d '{}' || echo '')
          echo "response=$RESP" >> $GITHUB_OUTPUT
          if [ -z "$RESP" ]; then
            echo "risk=0" >> $GITHUB_OUTPUT
          else
            RISK=$(echo "$RESP" | jq -r '.risk_score // 0')
            echo "risk=$RISK" >> $GITHUB_OUTPUT
            if [ "$RISK" -ge 80 ]; then
              echo "High risk ($RISK) detected"; exit 1
            fi
          fi

      - name: Comment on PR (if low risk)
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const risk = parseInt(process.env.RISK || '0');
            if (context.issue && context.issue.number) {
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `SecuraScan CI completed. risk_score=${risk}`
              })
            }
        env:
          RISK: ${{ steps.webhook.outputs.risk }}
name: securascanname: SecuraScan CI



on:on:

  push:  pull_request:

    branches: [ main, feature/** ]    types: [opened, synchronize, reopened]

  pull_request:

    branches: [ main ]jobs:

  security:

jobs:    runs-on: ubuntu-latest

  security:    steps:

    name: Security checks      - name: Checkout

    runs-on: ubuntu-latest        uses: actions/checkout@v4

    steps:

      - uses: actions/checkout@v4      - name: Run gitleaks (secret scan)

        uses: gitleaks/gitleaks-action@v2

      - name: Run gitleaks        with:

        uses: gitleaks/gitleaks-action@v2          args: '--verbose'



      - name: Install cargo-audit      - name: Install cargo-audit

        run: cargo install cargo-audit        run: |

        shell: bash          cargo install cargo-audit || true



      - name: Run cargo audit      - name: Run cargo-audit

        run: cargo audit        run: |

        working-directory: ./secureScan_Back          cd secureScan_Back

        shell: bash          cargo audit || true



  scan:  build-and-scan:

    name: Scan (placeholder)    needs: security

    runs-on: ubuntu-latest    runs-on: ubuntu-latest

    needs: security    steps:

    steps:      - name: Checkout

      - uses: actions/checkout@v4        uses: actions/checkout@v4

      - name: Placeholder scan step

        run: echo "Scan job running after security checks"      - name: Set up Rust

        uses: actions/setup-rust@v1

      - name: Build backend
        run: |
          cd secureScan_Back
          cargo build --release

      - name: Run backend tests
        run: |
          cd secureScan_Back
          cargo test --release

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Build frontend
        run: |
          cd secureScan_Front
          npm ci
          npm run build

      - name: Start backend (background)
        run: |
          cd secureScan_Back
          nohup cargo run --release &

      - name: Wait for backend
        run: |
          for i in {1..15}; do
            if curl -sSf http://127.0.0.1:8080/api/health; then
              exit 0
            fi
            sleep 1
          done
          exit 1

      - name: Call CI webhook and evaluate risk_score
        id: webhook
        run: |
          set -e
          # Send a simple request to our webhook endpoint. In CI this expects the
          # service to be running in the same runner. If not reachable, skip.
          RESP=$(curl -sS -X POST http://127.0.0.1:8080/api/ci/webhook/github -d '{}' || echo '')
          echo "response=$RESP" >> $GITHUB_OUTPUT
          if [ -z "$RESP" ]; then
            echo "webhook not reachable; skipping risk check"
            echo "risk=0" >> $GITHUB_OUTPUT
          else
            RISK=$(echo "$RESP" | jq -r '.risk_score // 0')
            echo "risk=$RISK" >> $GITHUB_OUTPUT
            if [ "$RISK" -ge 80 ]; then
              echo "High risk ($RISK) detected"; exit 1
            fi
          fi

      - name: Comment on PR (if low risk)
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const risk = parseInt(process.env.RISK || '0');
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `SecuraScan CI completed. risk_score=${risk}`
            })
        env:
          RISK: ${{ steps.webhook.outputs.risk }}
