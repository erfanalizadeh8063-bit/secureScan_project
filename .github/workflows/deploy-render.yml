name: Deploy â†’ Render

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  RENDER_API_BASE: https://api.render.com/v1

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate inputs
        run: |
          if [ -z "${{ secrets.RENDER_API_KEY }}" ]; then echo "Missing RENDER_API_KEY secret"; exit 1; fi
          if [ -z "${{ secrets.RENDER_BACK_SERVICE_ID }}" ]; then echo "Missing RENDER_BACK_SERVICE_ID secret"; exit 1; fi
          if [ -z "${{ secrets.RENDER_FRONT_SERVICE_ID }}" ]; then echo "Missing RENDER_FRONT_SERVICE_ID secret"; exit 1; fi

      - name: Get backend info
        id: backend_info
        run: |
          curl -sSf -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" "$RENDER_API_BASE/services/${{ secrets.RENDER_BACK_SERVICE_ID }}" > backend.json
          jq -r '.serviceDetails.url // .url // empty' backend.json | tee backend_url.txt || true

      - name: Get frontend info
        id: frontend_info
        run: |
          curl -sSf -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" "$RENDER_API_BASE/services/${{ secrets.RENDER_FRONT_SERVICE_ID }}" > frontend.json
          jq -r '.serviceDetails.url // .url // empty' frontend.json | tee frontend_url.txt || true

      - name: Show detected URLs
        run: |
          echo "Backend URL: $(cat backend_url.txt || echo '')"
          echo "Frontend URL: $(cat frontend_url.txt || echo '')"

      - name: Set frontend VITE_API_URL to backend URL
        if: always()
        run: |
          BACK_URL=$(cat backend_url.txt || echo '')
          if [ -z "$BACK_URL" ]; then echo "Warning: backend URL not detected; continuing"; fi
          # Create or update env var via Render API
          curl -sSf -X POST -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" -H "Content-Type: application/json" \
            -d "{\"key\":\"VITE_API_URL\",\"value\":\"${BACK_URL}\",\"scope\":\"env\"}" \
            "$RENDER_API_BASE/services/${{ secrets.RENDER_FRONT_SERVICE_ID }}/env-vars" || true

      - name: Trigger frontend deploy (clear cache)
        run: |
          echo "Triggering frontend deploy..."
          curl -sSf -X POST -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            "$RENDER_API_BASE/services/${{ secrets.RENDER_FRONT_SERVICE_ID }}/deploys" || true

      - name: Set backend FRONT_ORIGIN to frontend URL
        run: |
          FRONT_URL=$(cat frontend_url.txt || echo '')
          if [ -z "$FRONT_URL" ]; then echo "Warning: frontend URL not detected; continuing"; fi
          curl -sSf -X POST -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" -H "Content-Type: application/json" \
            -d "{\"key\":\"FRONT_ORIGIN\",\"value\":\"${FRONT_URL}\",\"scope\":\"env\"}" \
            "$RENDER_API_BASE/services/${{ secrets.RENDER_BACK_SERVICE_ID }}/env-vars" || true

      - name: Trigger backend redeploy
        run: |
          echo "Triggering backend deploy..."
          curl -sSf -X POST -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            "$RENDER_API_BASE/services/${{ secrets.RENDER_BACK_SERVICE_ID }}/deploys" || true

      - name: Wait for backend health
        run: |
          BACK_URL=$(cat backend_url.txt || echo '')
          if [ -z "$BACK_URL" ]; then echo "Backend URL not known; skipping health check"; exit 0; fi
          echo "Polling $BACK_URL/healthz ..."
          for i in 1 2 3 4 5 6 7 8 9 10; do
            HTTP=$(curl -s -o /dev/null -w "%{http_code}" "$BACK_URL/healthz" || echo "000")
            echo "attempt $i -> $HTTP"
            if [ "$HTTP" = "200" ]; then echo "backend healthy"; exit 0; fi
            sleep 5
          done
          echo "backend did not become healthy in time"; exit 1

      - name: Wait for frontend root
        run: |
          FRONT_URL=$(cat frontend_url.txt || echo '')
          if [ -z "$FRONT_URL" ]; then echo "Frontend URL not known; skipping front check"; exit 0; fi
          echo "Checking $FRONT_URL ..."
          for i in 1 2 3 4 5 6 7 8 9 10; do
            HTTP=$(curl -s -o /dev/null -w "%{http_code}" "$FRONT_URL" || echo "000")
            echo "attempt $i -> $HTTP"
            if [ "$HTTP" = "200" -o "$HTTP" = "304" ]; then echo "frontend serving"; exit 0; fi
            sleep 5
          done
          echo "frontend did not serve successfully in time"; exit 1

      - name: Output final URLs
        run: |
          echo "Backend URL: $(cat backend_url.txt || echo 'unknown')"
          echo "Frontend URL: $(cat frontend_url.txt || echo 'unknown')"
